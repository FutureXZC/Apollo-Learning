syntax = "proto2";

package apollo.hdmap;

import "modules/map/proto/map_id.proto";
import "modules/map/proto/map_geometry.proto";

// 车道边界类型
message LaneBoundaryType {
  enum Type {
    UNKNOWN = 0;  // 未知
    DOTTED_YELLOW = 1;  // 黄色虚线
    DOTTED_WHITE = 2;  // 白色虚线
    SOLID_YELLOW = 3;  // 黄色实线
    SOLID_WHITE = 4;  // 白色实线
    DOUBLE_YELLOW = 5;  // 双黄线
    CURB = 6;  // 路边线（外侧）
  };
  // Offset relative to the starting point of boundary
  // 相对于边界起点的偏移（与车道线的距离）
  optional double s = 1;
  // support multiple types
  // 支持多种类型（一个车道可以有多种边界线）
  repeated Type types = 2;
}

// 车道边界
message LaneBoundary {
  optional Curve curve = 1;  // 曲线

  optional double length = 2;  // 长度
  // indicate whether the lane boundary exists in real world
  // 现实中是否有车道边界，例如有的车道线会间隔一段距离
  optional bool virtual = 3;
  // in ascending order of s
  repeated LaneBoundaryType boundary_type = 4;  // 边界类型
}

// Association between central point to closest boundary.
// 中心点与边界之间关联
message LaneSampleAssociation {
  optional double s = 1;  // ？？
  optional double width = 2;  // 距离
}

// A lane is part of a roadway, that is designated for use by a single line of
// vehicles.
// Most public roads (include highways) have more than two lanes.
message Lane {
  optional Id id = 1;  // 编号

  // Central lane as reference trajectory, not necessary to be the geometry
  // central.
  optional Curve central_curve = 2;  // 中心曲线车道

  // Lane boundary curve.
  optional LaneBoundary left_boundary = 3;  // 车道左边界
  optional LaneBoundary right_boundary = 4;  // 车道右边界

  // in meters.
  optional double length = 5;  // 长度

  // Speed limit of the lane, in meters per second.
  optional double speed_limit = 6;  // 速度限制

  repeated Id overlap_id = 7;  // 重叠区域id

  // All lanes can be driving into (or from).
  repeated Id predecessor_id = 8;  // 前任车道id
  repeated Id successor_id = 9;  // 继任车道id

  // Neighbor lanes on the same direction.
  repeated Id left_neighbor_forward_lane_id = 10;  // 左前车道id
  repeated Id right_neighbor_forward_lane_id = 11;  // 右前车道id

  // 车道类型
  enum LaneType {
    NONE = 1;
    CITY_DRIVING = 2;  // 城市车道
    BIKING = 3;  // 自行车道（非机动车道）
    SIDEWALK = 4;  // 人行横道
    PARKING = 5;  // 停车
    SHOULDER = 6;  // 路肩
  };
  optional LaneType type = 12;

  // 转弯类型
  enum LaneTurn {
    NO_TURN = 1;  // 直行
    LEFT_TURN = 2;  // 左转弯
    RIGHT_TURN = 3;  // 右转弯
    U_TURN = 4;  // 掉头
  };
  optional LaneTurn turn = 13;

  repeated Id left_neighbor_reverse_lane_id = 14;  // 左边相邻反方向车道id
  repeated Id right_neighbor_reverse_lane_id = 15;  // 右边相邻反方向车道id

  optional Id junction_id = 16;  // 交叉路口id

  // Association between central point to closest boundary.
  repeated LaneSampleAssociation left_sample = 17;  // 中心点与最近左边界之间的关联
  repeated LaneSampleAssociation right_sample = 18;  // 中心点与最近右边界之间的关联

  // 车道方向
  enum LaneDirection {
    FORWARD = 1;  // 向前
    BACKWARD = 2;  // 向后
    BIDIRECTION = 3;  // 双向
  }
  optional LaneDirection direction = 19;

  // Association between central point to closest road boundary.
  // 中心点与道路边界关联
  repeated LaneSampleAssociation left_road_sample = 20;  // 中心点与道路左边界关联
  repeated LaneSampleAssociation right_road_sample = 21;  // 中心点与道路右边界关联

  repeated Id self_reverse_lane_id = 22;  // 与自身相反车道id
}
